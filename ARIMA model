import matplotlib.pyplot as plt
import calendar
from statsmodels.tsa.stattools import adfuller
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np
import os 
import math

from sklearn.model_selection import train_test_split, GridSearchCV
import seaborn as sns
sns.set_style('whitegrid')
import warnings
warnings.filterwarnings("ignore")


y = 2016
new_data = pd.DataFrame()
sample_times = []

for y in range(2014,2016,1):
   print (y)
   for m in range(1,13,1):
       no_of_days = calendar.monthrange(2014,m)[1]

       for d in range (1,no_of_days+1,1):
           data = pd.read_csv("C:\\Users\\USER\\OneDrive - University of Jaffna\\AhilanDoc\\Research\\github\\solar-forecasting-using-time-series\\data\\D120318_%d%02d%02d_0000.csv"%(y,m,d));
           
           if (pd.to_datetime(data['Date/time'][2]) -pd.to_datetime(data['Date/time'][1])).seconds ==600:
               new_data_temp = data[['Date/time','Anemometer;wind_speed;Avg','Wind Vane;wind_direction;Avg','Hygro/Thermo;humidity;Avg', 'Hygro/Thermo;temperature;Avg','Barometer;air_pressure;Avg','Pyranometer-Diffused;solar_irradiance;Avg', 'Pyranometer-Global;solar_irradiance;Avg', 'Silicon;voltage;Avg']][0:144].copy()
               new_data = pd.concat([new_data,new_data_temp])

               for i in range(len(new_data_temp)):
                   sample_times.append(datetime.datetime(y, m, d, 6, 00, 0)+ i*datetime.timedelta(minutes=10))
       
           elif (pd.to_datetime(data['Date/time'][2]) -pd.to_datetime(data['Date/time'][1])).seconds ==60:
               new_data_temp = data[['Date/time','Anemometer;wind_speed;Avg','Wind Vane;wind_direction;Avg','Hygro/Thermo;humidity;Avg', 'Hygro/Thermo;temperature;Avg','Barometer;air_pressure;Avg','Pyranometer-Diffused;solar_irradiance;Avg', 'Pyranometer-Global;solar_irradiance;Avg', 'Silicon;voltage;Avg']][0:1440].copy()
               new_data = pd.concat([new_data,new_data_temp])

               for i in range(len(new_data_temp)):
                   sample_times.append(datetime.datetime(y, m, d, 6, 00, 0)+ i*datetime.timedelta(minutes=1))

new_data.columns=['time','wind_speed','wind_dir','humidity','temperature','pressure','dhi','ghi','voltage']
sample_times_series = pd.Series(sample_times)
new_data['time'] = sample_times_series.values

new_data = new_data.reset_index().set_index('time').resample('10min').mean()
solar_irra= new_data.dhi.values

size = int(len(solar_irra) * 0.75)
train, test = solar_irra[0:size], solar_irra[size:len(solar_irra)]
train= np.nan_to_num(train)
test= np.nan_to_num(test)
history = [x for x in train]
predictions = list()
for t in range(len(test)):
    model = sm.tsa.arima.ARIMA(history, order=(2,1,0))
    model_fit = model.fit()
    output = model_fit.forecast()
    yhat = output[0]
    predictions.append(yhat)
    obs = test[t]
    history.append(obs)
    print('predicted=%f, expected=%f' % (yhat, obs))

pred = np.array(predictions)


error = math.sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % error)

plt.figure(figsize=(15,5))
plt.plot(predictions,color='blue',label='Predicted')
plt.plot(test,color='red',label='Actual')
plt.legend()
plt.xlabel('index')
plt.ylabel('Solar irradiance')
plt.show()